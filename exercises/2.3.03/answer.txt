2.3.3 What is the maximum number of times during the execution of Quick.sort()
that the largest item can be exchanged, for an array of length N ?

To answer this question, it is useful to look at some sample input and derive
an initial ordering of elements such that the number of exchanges involving the
largest element, maxElem, is maximized.

0 1 2 3
0 1 2 3
maxElem cannot be in its final position since there would be no exchanges.

3 2 1 0
0 2 1 3
maxElem cannot be in position 0 since it would first be moved to its final
position and that would only take 1 exchange.

2 3 1 0 <-
2 0 1 3
1 0 2 3
0 1 2 3
maxElem was only exchanged once here. This is because 0 was in position 3
in the initial order. This leads to the conclusion that the element in
the last position must be greater than the element of interest.

1 3 0 2
1 0 3 2
0 1 3 2
0 1 2 3
maxElem was exchanged twice here. This looks good.

1 7 0 6 5 4 3 2
1 0 7 6 5 4 3 2
0 1 7 6 5 4 3 2
0 1 2 6 5 4 3 7
maxElem was exchanged twice here. This is because the maxElem became the
element of interest. Revise the initial ordering such that maxElem does
not become the element of interest. The conclusion here is that the element
immediately before the element of interest must be 2 positions away from the
element of interest.

1 7 2 0 6 5 4 3
1 0 2 7 6 5 4 3
0 1 2 7 6 5 4 3
0 1 2 3 6 5 4 7
maxElem was exchanged 3 times here. More exchanges were possible but
was not achieved because 2 was in position 2, which quickly made
maxElem the element of interest. The conclusion here is that the element
immediately after maxElem must be 2 more than the element of interest.

1 7 3 0 6 5 4 2
1 0 3 7 6 5 4 2
0 1 3 7 6 5 4 2
0 1 3 2 6 5 4 7
maxElem was exchanged 3 times here. More exchanges were possible but
was not achieved because 2 was in position 7 and was less than 3
leading to the exchange that put maxElem in its final position. Put
the element that is maxElem - 1 at the end.

1 7 3 0 5 2 4 6
1 0 3 7 5 2 4 6
0 1 3 7 5 2 4 6
0 1 3 2 5 7 4 6
0 1 2 3 5 7 4 6
0 1 2 3 5 4 7 6
0 1 2 3 4 5 7 6
0 1 2 3 4 5 6 7
maxElem was exchanged 4 times here. It doesn't seem like any more exchanges are
possible. To maximize the number of exchanges, the initial ordering must enable
maxElem to move at least 2 spaces during every partition call except for the
very last call.

1 15  3  0  5  2  7  4  9  6 11  8 13 10 12 14
1  0  3 15  5  2  7  4  9  6 11  8 13 10 12 14
0  1  3 15  5  2  7  4  9  6 11  8 13 10 12 14
0  1  3  2  5 15  7  4  9  6 11  8 13 10 12 14
0  1  2  3  5 15  7  4  9  6 11  8 13 10 12 14
0  1  2  3  5 15  7  4  9  6 11  8 13 10 12 14
0  1  2  3  5  4  7 15  9  6 11  8 13 10 12 14
0  1  2  3  4  5  7 15  9  6 11  8 13 10 12 14
0  1  2  3  4  5  7  6  9 15 11  8 13 10 12 14
0  1  2  3  4  5  6  7  9 15 11  8 13 10 12 14
0  1  2  3  4  5  6  7  9  8 11 15 13 10 12 14
0  1  2  3  4  5  6  7  8  9 11 15 13 10 12 14
0  1  2  3  4  5  6  7  8  9 11 10 13 15 12 14
0  1  2  3  4  5  6  7  8  9 10 11 13 15 12 14
0  1  2  3  4  5  6  7  8  9 10 11 13 12 15 14
0  1  2  3  4  5  6  7  8  9 10 11 12 13 15 14
0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15
The maximum number of times maxElem can move is N/2.

See QuickSortMEE.java to generate an initial order that achieves the maximum
number of exchanges on the maximum element.
