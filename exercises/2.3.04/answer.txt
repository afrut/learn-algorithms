2.3.4 Suppose that the initial random shuffle is omitted. Give six arrays of
ten elements for which Quick.sort() uses the worst-case number of compares.

The inner loop for insertion sort are the scans of both the left and right
indices within partition(). To maximize the number of compares, the array can
be arranged such that after every call to partition(), one of the subarrays is
empty.

Six arrangments that result in the worst-case number of compares are:
0 1 2 3 4 5 6 7 8 9
9 8 7 6 5 4 3 2 1 0
0 9 1 2 3 4 5 6 7 8
0 9 2 3 4 5 6 7 8 1
9 1 8 7 6 5 4 3 2 0
9 1 2 3 4 5 6 7 8 0

The common thread among all these arrangements is that the final position of
the next element after every call to partition must be at one of the ends of
the arrays; never in the middle.
